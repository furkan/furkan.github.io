<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://furkan.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://furkan.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-11-20T06:19:10+00:00</updated><id>https://furkan.github.io/feed.xml</id><title type="html">furkan</title><subtitle>Personal webpage of furkan. </subtitle><entry><title type="html">estimating pi with random numbers</title><link href="https://furkan.github.io/blog/2023/pi-carlo/" rel="alternate" type="text/html" title="estimating pi with random numbers"/><published>2023-11-20T00:00:00+00:00</published><updated>2023-11-20T00:00:00+00:00</updated><id>https://furkan.github.io/blog/2023/pi-carlo</id><content type="html" xml:base="https://furkan.github.io/blog/2023/pi-carlo/"><![CDATA[<p><a href="https://github.com/furkan/pi-carlo">Notebook repository</a></p> <h2 id="estimating-pi-with-a-random-number-generator">Estimating pi with a random number generator</h2> <p>Recently, a friend asked me if I knew about Monte Carlo and told me that the number PI can be estimated with random numbers.</p> <p>I then decided to see if I could do that without looking up the solution.</p> <p>Here it goesâ€¦</p> <h3 id="import-stuff">Import stuff</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="sh">"</span><span class="s">matplotlib&lt;4</span><span class="sh">"</span> <span class="sh">"</span><span class="s">numpy&lt;2</span><span class="sh">"</span>

<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="c1"># Set the global grid property
</span><span class="n">plt</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="sh">'</span><span class="s">axes.grid</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

<span class="c1"># Initialize random number generator
</span><span class="n">rng</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">default_rng</span><span class="p">(</span><span class="n">seed</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>

</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Requirement already satisfied: matplotlib&lt;4 in ./venv/lib/python3.11/site-packages (3.8.2)
Requirement already satisfied: numpy&lt;2 in ./venv/lib/python3.11/site-packages (1.26.2)
Requirement already satisfied: contourpy&gt;=1.0.1 in ./venv/lib/python3.11/site-packages (from matplotlib&lt;4) (1.2.0)
Requirement already satisfied: cycler&gt;=0.10 in ./venv/lib/python3.11/site-packages (from matplotlib&lt;4) (0.12.1)
Requirement already satisfied: fonttools&gt;=4.22.0 in ./venv/lib/python3.11/site-packages (from matplotlib&lt;4) (4.44.3)
Requirement already satisfied: kiwisolver&gt;=1.3.1 in ./venv/lib/python3.11/site-packages (from matplotlib&lt;4) (1.4.5)
Requirement already satisfied: packaging&gt;=20.0 in ./venv/lib/python3.11/site-packages (from matplotlib&lt;4) (23.2)
Requirement already satisfied: pillow&gt;=8 in ./venv/lib/python3.11/site-packages (from matplotlib&lt;4) (10.1.0)
Requirement already satisfied: pyparsing&gt;=2.3.1 in ./venv/lib/python3.11/site-packages (from matplotlib&lt;4) (3.1.1)
Requirement already satisfied: python-dateutil&gt;=2.7 in ./venv/lib/python3.11/site-packages (from matplotlib&lt;4) (2.8.2)
Requirement already satisfied: six&gt;=1.5 in ./venv/lib/python3.11/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib&lt;4) (1.16.0)
Note: you may need to restart the kernel to use updated packages.
</code></pre></div></div> <h3 id="generate-random-points-x-y-pairs-uniformly-distributed-in-the-unit-square">Generate random points (x, y pairs) uniformly distributed in the unit square</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">number_of_pairs</span> <span class="o">=</span> <span class="mi">1_000</span>

<span class="c1"># Generate both axes
</span><span class="n">xy</span> <span class="o">=</span> <span class="n">rng</span><span class="p">.</span><span class="nf">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">number_of_pairs</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>

<span class="c1"># Split into x and y
</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array_split</span><span class="p">(</span><span class="n">xy</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">show_scatter</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

<span class="nf">show_scatter</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

</code></pre></div></div> <div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/pi-carlo/pi_carlo_6_0-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/pi-carlo/pi_carlo_6_0-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/pi-carlo/pi_carlo_6_0-1400.webp"/> <img src="/assets/img/pi-carlo/pi_carlo_6_0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="remove-points-outside-of-the-unit-circle">Remove points outside of the unit circle</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mask</span> <span class="o">=</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">y</span><span class="o">**</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="mi">1</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">mask</span><span class="p">]</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">[</span><span class="n">mask</span><span class="p">]</span>

<span class="nf">show_scatter</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

</code></pre></div></div> <div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/pi-carlo/pi_carlo_8_0-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/pi-carlo/pi_carlo_8_0-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/pi-carlo/pi_carlo_8_0-1400.webp"/> <img src="/assets/img/pi-carlo/pi_carlo_8_0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="map-all-points-on-the-circle-border">Map all points on the circle border</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">distances_from_origin</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">y</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">divide</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">distances_from_origin</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">divide</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">distances_from_origin</span><span class="p">)</span>

<span class="nf">show_scatter</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

</code></pre></div></div> <div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/pi-carlo/pi_carlo_10_0-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/pi-carlo/pi_carlo_10_0-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/pi-carlo/pi_carlo_10_0-1400.webp"/> <img src="/assets/img/pi-carlo/pi_carlo_10_0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="observe-the-distribution-of-x">Observe the distribution of x</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">show_histogram</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">bins</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">30</span><span class="p">):</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">hist</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="n">bins</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="sh">'</span><span class="s">black</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

<span class="nf">show_histogram</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

</code></pre></div></div> <div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/pi-carlo/pi_carlo_12_0-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/pi-carlo/pi_carlo_12_0-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/pi-carlo/pi_carlo_12_0-1400.webp"/> <img src="/assets/img/pi-carlo/pi_carlo_12_0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>As we get from x=0 to x=1, the circle border gets more perpendicular to the x axis, and the x values of the random numbers are more condensed.</p> <h3 id="get-all-the-distances-between-x-values">Get all the distances between x values</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_counterpart</span><span class="p">(</span><span class="n">x_or_y</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Given an x value between 0 and 1,
      find the y value that maps
      that x value on the unit circle.
    Works x-&gt;y and y-&gt;x.
    </span><span class="sh">"""</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">ones</span><span class="p">(</span><span class="n">x_or_y</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span> <span class="o">-</span> <span class="n">x_or_y</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_euclidian_distances</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Given two x matrices,
      find the euclidian distance between their
      corresponding points on the unit circle.
    It is an element-wise operation.
    </span><span class="sh">"""</span>
    <span class="n">y1</span> <span class="o">=</span> <span class="nf">get_counterpart</span><span class="p">(</span><span class="n">x1</span><span class="p">)</span>
    <span class="n">y2</span> <span class="o">=</span> <span class="nf">get_counterpart</span><span class="p">(</span><span class="n">x2</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">((</span><span class="n">x1</span> <span class="o">-</span> <span class="n">x2</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">y1</span> <span class="o">-</span><span class="n">y2</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>

<span class="n">x</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>

<span class="c1"># Obtain each distance between neighboring points on the unit circle
</span><span class="n">distances</span> <span class="o">=</span> <span class="nf">get_euclidian_distances</span><span class="p">(</span><span class="n">x</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>

</code></pre></div></div> <h3 id="estime-pi-by-summing-the-distances-obtaining-the-length-of-the-quarter-circle">Estime pi by summing the distances (obtaining the length of the quarter circle)</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">quarter_circle_circumference</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">distances</span><span class="p">)</span>

<span class="c1"># pi is half a complete circle
</span><span class="n">pi</span> <span class="o">=</span> <span class="n">quarter_circle_circumference</span> <span class="o">*</span> <span class="mi">2</span>

<span class="nf">print</span><span class="p">(</span><span class="n">pi</span><span class="p">)</span>

</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3.1375185348374206
</code></pre></div></div> <h3 id="grid-search-various-numbers-of-points-on-the-circle-to-observe-convergence">Grid search various numbers of points on the circle to observe convergence</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">math</span>
<span class="kn">from</span> <span class="n">time</span> <span class="kn">import</span> <span class="n">perf_counter</span>

<span class="k">def</span> <span class="nf">estimate_pi</span><span class="p">(</span><span class="n">points_inside_unit_square</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Given an amount of number of random points, estimate pi.
    </span><span class="sh">"""</span>

    <span class="c1"># Generate points
</span>    <span class="n">xy</span> <span class="o">=</span> <span class="n">rng</span><span class="p">.</span><span class="nf">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">points_inside_unit_square</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array_split</span><span class="p">(</span><span class="n">xy</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

    <span class="c1"># Remove points outside of circle
</span>    <span class="n">mask</span> <span class="o">=</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">y</span><span class="o">**</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="mi">1</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">mask</span><span class="p">]</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">[</span><span class="n">mask</span><span class="p">]</span>

    <span class="c1"># Carry x values to the circle border
</span>    <span class="n">distances_from_origin</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">y</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">divide</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">distances_from_origin</span><span class="p">)</span>

    <span class="c1"># Sum over the distances between points on circle
</span>    <span class="n">x</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>
    <span class="n">distances</span> <span class="o">=</span> <span class="nf">get_euclidian_distances</span><span class="p">(</span><span class="n">x</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">distances</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>


<span class="k">def</span> <span class="nf">get_error</span><span class="p">(</span><span class="n">pi_estimation</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Get the relative error of the pi estimation.
    </span><span class="sh">"""</span>
    <span class="k">return</span> <span class="nf">abs</span><span class="p">(</span><span class="n">pi_estimation</span> <span class="o">-</span> <span class="n">math</span><span class="p">.</span><span class="n">pi</span><span class="p">)</span> <span class="o">/</span> <span class="n">math</span><span class="p">.</span><span class="n">pi</span>


<span class="n">numbers_of_points_inside_unit_square</span> <span class="o">=</span> <span class="p">[</span>
    <span class="mi">10_000</span><span class="p">,</span> <span class="mi">100_000</span><span class="p">,</span> <span class="mi">1_000_000</span><span class="p">,</span>
    <span class="mi">10_000_000</span><span class="p">,</span> <span class="mi">100_000_000</span>
<span class="p">]</span>
<span class="n">errors</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">start_time</span> <span class="o">=</span> <span class="nf">perf_counter</span><span class="p">()</span>
<span class="k">for</span> <span class="n">number_of_points_inside_unit_square</span> <span class="ow">in</span> <span class="n">numbers_of_points_inside_unit_square</span><span class="p">:</span>
    <span class="n">pi</span> <span class="o">=</span> <span class="nf">estimate_pi</span><span class="p">(</span><span class="n">number_of_points_inside_unit_square</span><span class="p">)</span>
    <span class="n">error</span> <span class="o">=</span> <span class="nf">get_error</span><span class="p">(</span><span class="n">pi</span><span class="p">)</span>
    <span class="n">errors</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">number_of_points_inside_unit_square</span><span class="o">=</span><span class="si">:</span><span class="o">&gt;</span><span class="mi">15</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">error</span><span class="o">=</span><span class="si">:</span><span class="p">.</span><span class="mi">10</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="n">end_time</span> <span class="o">=</span> <span class="nf">perf_counter</span><span class="p">()</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">Circumference method took: </span><span class="si">{</span><span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span><span class="si">}</span><span class="s"> seconds.</span><span class="sh">"</span><span class="p">)</span>
    
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>number_of_points_inside_unit_square=          10000, error=0.0000264447
number_of_points_inside_unit_square=         100000, error=0.0000401923
number_of_points_inside_unit_square=        1000000, error=0.0000037544
number_of_points_inside_unit_square=       10000000, error=0.0000001447
number_of_points_inside_unit_square=      100000000, error=0.0000000194

Circumference method took: 14.25504916600039 seconds.
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">numbers_of_points_inside_unit_square</span><span class="p">,</span> <span class="n">errors</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xscale</span><span class="p">(</span><span class="sh">"</span><span class="s">log</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">yscale</span><span class="p">(</span><span class="sh">"</span><span class="s">log</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">random points on circle</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">error in PI estimation</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

</code></pre></div></div> <div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/pi-carlo/pi_carlo_20_0-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/pi-carlo/pi_carlo_20_0-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/pi-carlo/pi_carlo_20_0-1400.webp"/> <img src="/assets/img/pi-carlo/pi_carlo_20_0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h2 id="update">UPDATE</h2> <p>I showed this to my friend and found out that I did not have to make this as complicated as it is.</p> <p>Here is a version that uses the numbers of points before and after cleaning the points inside the square, outside the circle.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">estimate_pi_area</span><span class="p">(</span><span class="n">number_of_points_inside_unit_square</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="n">xy</span> <span class="o">=</span> <span class="n">rng</span><span class="p">.</span><span class="nf">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">number_of_points_inside_unit_square</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array_split</span><span class="p">(</span><span class="n">xy</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

    <span class="n">mask</span> <span class="o">=</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">y</span><span class="o">**</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="mi">1</span>
    <span class="n">number_of_points_inside_unit_circle</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">mask</span><span class="p">)</span>

    <span class="c1"># pi * r^2 (r=1) = pi (our quarter circle is pi / 4)
</span>    <span class="n">entire_circle_area</span> <span class="o">=</span> <span class="n">number_of_points_inside_unit_circle</span> <span class="o">*</span> <span class="mi">4</span>

    <span class="k">return</span> <span class="n">entire_circle_area</span> <span class="o">/</span> <span class="n">number_of_points_inside_unit_square</span>

<span class="n">errors_area</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">start_time</span> <span class="o">=</span> <span class="nf">perf_counter</span><span class="p">()</span>
<span class="k">for</span> <span class="n">number_of_points_inside_unit_square</span> <span class="ow">in</span> <span class="n">numbers_of_points_inside_unit_square</span><span class="p">:</span>
    <span class="n">pi</span> <span class="o">=</span> <span class="nf">estimate_pi_area</span><span class="p">(</span><span class="n">number_of_points_inside_unit_square</span><span class="p">)</span>
    <span class="n">error_area</span> <span class="o">=</span> <span class="nf">get_error</span><span class="p">(</span><span class="n">pi</span><span class="p">)</span>
    <span class="n">errors_area</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">error_area</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">number_of_points_inside_unit_square</span><span class="o">=</span><span class="si">:</span><span class="o">&gt;</span><span class="mi">15</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">error_area</span><span class="o">=</span><span class="si">:</span><span class="p">.</span><span class="mi">10</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="n">end_time</span> <span class="o">=</span> <span class="nf">perf_counter</span><span class="p">()</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">\Area method took: </span><span class="si">{</span><span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span><span class="si">}</span><span class="s"> seconds.</span><span class="sh">"</span><span class="p">)</span>

</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>number_of_points_inside_unit_square=          10000, error_area=0.0077644228
number_of_points_inside_unit_square=         100000, error_area=0.0013137752
number_of_points_inside_unit_square=        1000000, error_area=0.0000978314
number_of_points_inside_unit_square=       10000000, error_area=0.0000083568
number_of_points_inside_unit_square=      100000000, error_area=0.0000315297
\Area method took: 1.3466923750020214 seconds.
</code></pre></div></div> <p>Letâ€™s see if we can get closer sparing some of the gained speed.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">start_time</span> <span class="o">=</span> <span class="nf">perf_counter</span><span class="p">()</span>
<span class="n">largest_amount_in_list</span> <span class="o">=</span> <span class="n">numbers_of_points_inside_unit_square</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="c1"># 4 times the largest example in circumference method
</span><span class="n">larger_amount_test_area</span> <span class="o">=</span> <span class="n">largest_amount_in_list</span> <span class="o">*</span> <span class="mi">4</span>
<span class="n">pi</span> <span class="o">=</span> <span class="nf">estimate_pi_area</span><span class="p">(</span><span class="n">larger_amount_test_area</span><span class="p">)</span>
<span class="n">error_area</span> <span class="o">=</span> <span class="nf">get_error</span><span class="p">(</span><span class="n">pi</span><span class="p">)</span>
<span class="n">errors_area</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">error_area</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">number_of_points_inside_unit_square</span><span class="o">=</span><span class="si">:</span><span class="o">&gt;</span><span class="mi">15</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">error_area</span><span class="o">=</span><span class="si">:</span><span class="p">.</span><span class="mi">10</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="n">end_time</span> <span class="o">=</span> <span class="nf">perf_counter</span><span class="p">()</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">\Area method with </span><span class="si">{</span><span class="n">larger_amount_test_area</span><span class="si">:</span><span class="n">_</span><span class="si">}</span><span class="s"> took: </span><span class="si">{</span><span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span><span class="si">}</span><span class="s"> seconds.</span><span class="sh">"</span><span class="p">)</span>

</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>number_of_points_inside_unit_square=      100000000, error_area=0.0000055947
\Area method with 400_000_000 took: 32.012539082999865 seconds.
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">numbers_of_points_inside_unit_square</span> <span class="o">+</span> <span class="p">[</span><span class="n">larger_amount_test_area</span><span class="p">],</span>
         <span class="n">errors_area</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">area method</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">numbers_of_points_inside_unit_square</span><span class="p">,</span> <span class="n">errors</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">circumference method</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xscale</span><span class="p">(</span><span class="sh">"</span><span class="s">log</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">yscale</span><span class="p">(</span><span class="sh">"</span><span class="s">log</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">random points on circle</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">error in PI estimation</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

</code></pre></div></div> <div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/pi-carlo/pi_carlo_25_0-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/pi-carlo/pi_carlo_25_0-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/pi-carlo/pi_carlo_25_0-1400.webp"/> <img src="/assets/img/pi-carlo/pi_carlo_25_0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>The area method is much much simpler. After learning about it, I was a bit ashamed of having added all that <a href="https://grugbrain.dev/#grug-on-complexity">complexity</a>, but it turns out it was improving performance. Letâ€™s drop one final plot to better compare runtimes and call it a day.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">estimate_pi_circumference_with_time</span><span class="p">(</span>
        <span class="n">number_of_points_inside_unit_square</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Estimate pi with circumference method.
    Returns a tuple with error in pi estimation, and the runtime.
    </span><span class="sh">"""</span>
    <span class="n">start_time</span> <span class="o">=</span> <span class="nf">perf_counter</span><span class="p">()</span>
    <span class="n">pi</span> <span class="o">=</span> <span class="nf">estimate_pi</span><span class="p">(</span><span class="n">number_of_points_inside_unit_square</span><span class="p">)</span>
    <span class="n">error</span> <span class="o">=</span> <span class="nf">get_error</span><span class="p">(</span><span class="n">pi</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">number_of_points_inside_unit_square</span><span class="o">=</span><span class="si">:</span><span class="o">&gt;</span><span class="mi">15</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">error</span><span class="o">=</span><span class="si">:</span><span class="p">.</span><span class="mi">10</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">end_time</span> <span class="o">=</span> <span class="nf">perf_counter</span><span class="p">()</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">error</span><span class="p">,</span> <span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">estimate_pi_area_with_time</span><span class="p">(</span>
        <span class="n">number_of_points_inside_unit_square</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Estimate pi with area method.
    Returns a tuple with error in pi estimation, and the runtime.
    </span><span class="sh">"""</span>
    <span class="n">start_time</span> <span class="o">=</span> <span class="nf">perf_counter</span><span class="p">()</span>
    <span class="n">pi</span> <span class="o">=</span> <span class="nf">estimate_pi_area</span><span class="p">(</span><span class="n">number_of_points_inside_unit_square</span><span class="p">)</span>
    <span class="n">error_area</span> <span class="o">=</span> <span class="nf">get_error</span><span class="p">(</span><span class="n">pi</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">number_of_points_inside_unit_square</span><span class="o">=</span><span class="si">:</span><span class="o">&gt;</span><span class="mi">15</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">error_area</span><span class="o">=</span><span class="si">:</span><span class="p">.</span><span class="mi">10</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">end_time</span> <span class="o">=</span> <span class="nf">perf_counter</span><span class="p">()</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">error_area</span><span class="p">,</span> <span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">)</span>

<span class="n">numbers_of_points_inside_unit_square</span> <span class="o">=</span> <span class="p">[</span>
    <span class="mi">10_000</span><span class="p">,</span> <span class="mi">100_000</span><span class="p">,</span> <span class="mi">1_000_000</span><span class="p">,</span>
    <span class="mi">10_000_000</span><span class="p">,</span> <span class="mi">100_000_000</span>
<span class="p">]</span>
<span class="n">errors_circumference</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">runtimes_circumference</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">errors_area</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">runtimes_area</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">number_of_points_inside_unit_square</span> <span class="ow">in</span> <span class="n">numbers_of_points_inside_unit_square</span><span class="p">:</span>
    <span class="n">error_circumference</span><span class="p">,</span> <span class="n">runtime_circumference</span> <span class="o">=</span> <span class="p">(</span>
        <span class="nf">estimate_pi_circumference_with_time</span><span class="p">(</span><span class="n">number_of_points_inside_unit_square</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="n">errors_circumference</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">error_circumference</span><span class="p">)</span>
    <span class="n">runtimes_circumference</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">runtime_circumference</span><span class="p">)</span>

    <span class="n">error_area</span><span class="p">,</span> <span class="n">runtime_area</span> <span class="o">=</span> <span class="p">(</span>
        <span class="nf">estimate_pi_area_with_time</span><span class="p">(</span><span class="n">number_of_points_inside_unit_square</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="n">errors_area</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">error_area</span><span class="p">)</span>
    <span class="n">runtimes_area</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">runtime_area</span><span class="p">)</span>

<span class="n">larger_amount_test_area</span> <span class="o">=</span> <span class="n">numbers_of_points_inside_unit_square</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="mi">5</span>
<span class="n">error_area</span><span class="p">,</span> <span class="n">runtime_area</span> <span class="o">=</span> <span class="nf">estimate_pi_area_with_time</span><span class="p">(</span><span class="n">larger_amount_test_area</span><span class="p">)</span>
<span class="n">errors_area</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">error_area</span><span class="p">)</span>
<span class="n">runtimes_area</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">runtime_area</span><span class="p">)</span>

</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>number_of_points_inside_unit_square=          10000, error=0.0006619905
number_of_points_inside_unit_square=          10000, error_area=0.0038220571
number_of_points_inside_unit_square=         100000, error=0.0000117467
number_of_points_inside_unit_square=         100000, error_area=0.0001423948
number_of_points_inside_unit_square=        1000000, error=0.0000034482
number_of_points_inside_unit_square=        1000000, error_area=0.0004785300
number_of_points_inside_unit_square=       10000000, error=0.0000003295
number_of_points_inside_unit_square=       10000000, error_area=0.0001714588
number_of_points_inside_unit_square=      100000000, error=0.0000000743
number_of_points_inside_unit_square=      100000000, error_area=0.0001217046
number_of_points_inside_unit_square=      500000000, error_area=0.0000182473
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">runtimes_area</span><span class="p">,</span> <span class="n">errors_area</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">area method</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">runtimes_circumference</span><span class="p">,</span> <span class="n">errors_circumference</span><span class="p">,</span>
         <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">circumference method</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xscale</span><span class="p">(</span><span class="sh">"</span><span class="s">log</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">yscale</span><span class="p">(</span><span class="sh">"</span><span class="s">log</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">time (s)</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">error in PI estimation</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

</code></pre></div></div> <div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/pi-carlo/pi_carlo_28_0-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/pi-carlo/pi_carlo_28_0-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/pi-carlo/pi_carlo_28_0-1400.webp"/> <img src="/assets/img/pi-carlo/pi_carlo_28_0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name></name></author><category term="math"/><category term="jupyter"/><category term="notebook"/><summary type="html"><![CDATA[finding pi with random numbers]]></summary></entry></feed>